{"version":3,"sources":["p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h5-rrd-v6/Header.tsx","p2-homeworks/h5-rrd-v6/pages/Error404.tsx","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx","p2-homeworks/h6/common/c4-SuperEditableSpan/SuperEditableSpan.tsx","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h6/localStorage/localStorage.ts","p2-homeworks/h6/HW6.tsx","p2-homeworks/h5-rrd-v6/pages/PreJunior.tsx","p2-homeworks/h7/common/c5-SuperSelect/SuperSelect.tsx","p2-homeworks/h7/common/c6-SuperRadio/SuperRadio.tsx","p2-homeworks/h7/HW7.tsx","p2-homeworks/h5-rrd-v6/pages/Junior.tsx","p2-homeworks/h5-rrd-v6/pages/JuniorPlus.tsx","p2-homeworks/h5-rrd-v6/Pages.tsx","p2-homeworks/h5-rrd-v6/HW5.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","to","Error404","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperEditableSpan","autoFocus","onBlur","spanProps","useState","editMode","setEditMode","children","onDoubleClick","restSpanProps","SuperButton","red","finalClassName","default","saveState","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","x","y","HW6","setValue","undefined","onClick","PreJunior","SuperSelect","options","onChangeOption","mappedOptions","map","elem","index","SuperRadio","name","onChangeCallback","o","i","checked","arr","HW7","Junior","JuniorPlus","PATH","Pages","path","element","HW5","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.99535524.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__1yllH\",\"errorInput\":\"SuperInputText_errorInput__1AJyb\",\"error\":\"SuperInputText_error__3Gulr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__d8t82\",\"red\":\"SuperButton_red__1jxW7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__19KuE\"};","import React from 'react'\nimport {NavLink} from \"react-router-dom\";\nimport './hw5.css'\n\nfunction Header() {\n    return (\n        <div className={'header'}>\n            <NavLink to = {'/pre-junior'} className={'link'} >PreJunior</NavLink>\n            <NavLink to = {'/junior'} className={'link'} >Junior</NavLink>\n            <NavLink to = {'/junior+'} className={'link'} >JuniorPlus</NavLink>\n            <div className= 'block' />\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nfunction Error404() {\n    return (\n        <div>\n            <div>404</div>\n            <div>Page not found!</div>\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\n        </div>\n    )\n}\n\nexport default Error404\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}`\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from 'react'\r\nimport SuperInputText from '../../../h4/common/c1-SuperInputText/SuperInputText'\r\nimport './h6.styles.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n// тип пропсов обычного спана\r\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n\r\n    spanProps?: DefaultSpanPropsType // пропсы для спана\r\n}\r\n\r\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\r\n    {\r\n        autoFocus, // игнорировать изменение этого пропса\r\n        onBlur,\r\n        onEnter,\r\n        spanProps,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}\r\n\r\n    const onEnterCallback = () => {\r\n        setEditMode(false) // выключить editMode при нажатии Enter\r\n\r\n        onEnter && onEnter()\r\n    }\r\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\r\n         setEditMode(false) // выключить editMode при нажатии за пределами инпута\r\n\r\n        onBlur && onBlur(e)\r\n    }\r\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n         setEditMode(true) // включить editMode при двойном клике\r\n\r\n        onDoubleClick && onDoubleClick(e)\r\n    }\r\n\r\n\r\n    const spanClassName = `${'spanClassHW6'} ${className}`\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                ? (\r\n                    <SuperInputText\r\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\r\n                        onBlur={onBlurCallback}\r\n                        onEnter={onEnterCallback}\r\n\r\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n                    />\r\n                ) : (\r\n                    <span\r\n                        onDoubleClick={onDoubleClickCallBack}\r\n                        className={spanClassName}\r\n\r\n                        {...restSpanProps}\r\n                    >\r\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\r\n                        {children || restProps.value}\r\n                    </span>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperEditableSpan\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","// вот вам функция для сохранения объектов в память браузера\r\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\r\nexport function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state)\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    let state = defaultState\r\n    const stateAsString = localStorage.getItem(key)\r\n    if (stateAsString !== null) state = JSON.parse(stateAsString) as T\r\n    return state\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------------------------------\r\n// пример использования:\r\ntype StateType = {\r\n    x: string\r\n    y: number\r\n}\r\n\r\n// сохраняем объект типа StateType в ячейке 'test'\r\nsaveState<StateType>('test', {x: 'A', y: 1})\r\n\r\n// получем в переменную state объект из ячейки 'test' или дэфолтный объект если ячейка пуста\r\nconst state: StateType = restoreState<StateType>('test', {x: '', y: 0})\r\n","import React, {useState} from 'react'\r\nimport SuperEditableSpan from './common/c4-SuperEditableSpan/SuperEditableSpan'\r\nimport SuperButton from '../h4/common/c2-SuperButton/SuperButton'\r\nimport {restoreState, saveState} from './localStorage/localStorage'\r\n\r\nfunction HW6() {\r\n    const [value, setValue] = useState<string>('')\r\n\r\n    const save = () => {\r\n        saveState<string>('editable-span-value', value)\r\n    }\r\n    const restore = () => {\r\n        setValue( restoreState('editable-span-value', value) )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 6\r\n\r\n            {/*should work (должно работать)*/}\r\n            <div>\r\n                <SuperEditableSpan\r\n                    value={value}\r\n                    onChangeText={setValue}\r\n                    spanProps={{children: value ? undefined : 'enter text...'}}\r\n                />\r\n            </div>\r\n            <SuperButton onClick={save}>save</SuperButton>\r\n            <SuperButton onClick={restore}>restore</SuperButton>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW6\r\n","import React from 'react'\nimport HW1 from '../../h1/HW1'\nimport HW2 from '../../h2/HW2'\nimport HW3 from '../../h3/HW3'\nimport HW4 from '../../h4/HW4'\nimport HW6 from '../../h6/HW6'\n\nfunction PreJunior() {\n    return (\n        <div>\n            {/*<HW1/>*/}\n            {/*<HW2/>*/}\n            {/*<HW3/>*/}\n            {/*<HW4/>*/}\n            <HW6/>\n\n        </div>\n    )\n}\n\nexport default PreJunior\n\n// сделайте по аналогии пустые страницы джун и джун+\n// туда будут добавляться следующие дз","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react'\r\nimport './superSelect.css'\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        options,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const mappedOptions: any[] = options ? options.map((elem, index) =>\r\n\r\n        <option key={index}>{elem}</option>\r\n\r\n    ) : []\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        // onChange, onChangeOption\r\n        if (onChange) {\r\n            onChange(e)\r\n        }\r\n        if (onChangeOption) {\r\n            onChangeOption(e.currentTarget.value)\r\n        }\r\n    }\r\n    return (\r\n        <select className={'selectClass'} onChange={onChangeCallback} {...restProps}>\r\n            {mappedOptions}\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default SuperSelect\r\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport './superRadio.css'\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n        type, name,\r\n        options, value,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // onChange, onChangeOption\r\n        if (onChange) {\r\n            onChange(e)\r\n        }\r\n        if (onChangeOption) {\r\n            onChangeOption(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n\r\n    const mappedOptions: any[] = options ? options.map((o, i) => ( // map options with key\r\n        <label key={name + '-' + i}>\r\n            <input\r\n                type={'radio'}\r\n                // name, checked, value, onChange\r\n                name={name}\r\n                value={o}\r\n                onChange={onChangeCallback}\r\n                checked={o === value}\r\n                className= 'superRadio'\r\n            />\r\n            {o}\r\n        </label>\r\n    )) : []\r\n\r\n    return (\r\n        <>\r\n            {mappedOptions}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperRadio\r\n","import React, {useState} from 'react'\r\nimport SuperSelect from './common/c5-SuperSelect/SuperSelect'\r\nimport SuperRadio from './common/c6-SuperRadio/SuperRadio'\r\n\r\nconst arr = ['x', 'y', 'z']\r\n\r\nfunction HW7() {\r\n    const [value, onChangeOption] = useState(arr[1])\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 7\r\n\r\n            <div>\r\n                <SuperSelect\r\n                    options={arr}\r\n                    value={value}\r\n                    onChangeOption={onChangeOption}\r\n                />\r\n            </div>\r\n            <div>\r\n                <SuperRadio\r\n                    name={'radio'}\r\n                    options={arr}\r\n                    value={value}\r\n                    onChangeOption={onChangeOption}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW7\r\n","import React from 'react'\nimport HW7 from \"../../h7/HW7\";\n\nexport function Junior() {\n    return (\n        <div>\n            <HW7/>\n        </div>\n    )\n}\n\n// сделайте по аналогии пустые страницы джун и джун+\n// туда будут добавляться следующие дз","import React from 'react'\n\nexport function JuniorPlus() {\n    return (\n        <div>\n            JuniorPlus\n        </div>\n    )\n}\n\n\n// сделайте по аналогии пустые страницы джун и джун+\n// туда будут добавляться следующие дз","import React from 'react'\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport Error404 from \"./pages/Error404\";\nimport PreJunior from \"./pages/PreJunior\";\nimport {Junior} from \"./pages/Junior\";\nimport {JuniorPlus} from \"./pages/JuniorPlus\";\nimport './hw5.css'\n\nexport const PATH = {\n    PRE_JUNIOR: '/pre-junior/*',\n    JUNIOR : '/junior/*',\n    JUNIOR_PLUS : '/junior+/*'\n}\n\nfunction Pages() {\n    return (\n        <div>\n            {/*Routes выбирает первый подходящий роут*/}\n            <Routes>\n\n                {/*в начале мы попадаем на страницу '/' и переходим сразу на страницу PRE_JUNIOR*/}\n                <Route path={'/'} element={<Navigate to={PATH.PRE_JUNIOR}/>}/>\n\n                <Route path={PATH.PRE_JUNIOR} element={<PreJunior/>}/>\n                <Route path={PATH.JUNIOR} element={<Junior/>}/>\n                <Route path={PATH.JUNIOR_PLUS} element={<JuniorPlus/>}/>\n\n\n                {/*он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\n                <Route path={'/*'} element={<Error404/>}/>\n\n            </Routes>\n        </div>\n    )\n}\n\nexport default Pages\n","import React from 'react'\nimport Header from './Header'\nimport Pages from './Pages'\nimport {HashRouter} from \"react-router-dom\";\n\nfunction HW5() {\n    return (\n        <div>\n            {/*в gh-pages лучше работает HashRouter*/}\n            <HashRouter>\n\n            <Header/>\n\n            <Pages/>\n\n            </HashRouter>\n        </div>\n    )\n}\n\nexport default HW5\n","import React from 'react'\r\nimport s from './App.module.css'\r\nimport HW5 from \"../../../p2-homeworks/h5-rrd-v6/HW5\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            {/*<HW1/>*/}\r\n            {/*<HW2/>*/}\r\n            {/*<HW3/>*/}\r\n            {/*<HW4/>*/}\r\n            <HW5/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './p1-main/m1-ui/u1-app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n           <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}